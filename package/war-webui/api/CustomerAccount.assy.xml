<rpc:DispatchHandler
  xmlns:rpc="class:/spiralcraft/servlet/rpc/"
  xmlns:t="class:/spiralcraft/task/"
  xmlns:dt="class:/spiralcraft/data/task/"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  xmlns:j="class:/java/lang/"
  xmlns:fn="class:/spiralcraft/lang/functions"
  xmlns:util="class:/spiralcraft/util"
  xmlns:biz="class:/spiralcraft/biz/meta/"
  >
  <debug>false
  </debug>
  <name>customerAccount
  </name>
  <contextX>
  [#api]
  {
    type:~[@biz:CustomerAccount],
    out:~[#{[api].type.@nil}]
            { [.]
              {{
                accountId:=..accountId,
                displayName:=..displayName,
                contact:=..contact,
                contactId:=..contactId,
                rep:=..rep,
                entity:=..entity,
                paymentMethod:=..paymentMethod{.!=null?.
                  { id:=..id,
                    displayName:=..displayName,
                  }:null},
                paymentTerms:=..paymentTerms{.!=null?.
                  { id:=..id,
                    displayName:=..displayName,
                  }:null},
                projects:=..projects#
                  {{ id:=..id,
                     displayName:=..displayName,
                     active:=..active,
                  }}
              }}
           }
         
  }
  </contextX>
  <defaultHandler>
    <rpc:JsonHandler>
      <result>
        [*dt:Fetch{[api].type.type.aggregateType}].()
          #{[api].out(.)}
      </result>
    </rpc:JsonHandler>
  </defaultHandler>
  <handlers>
    <rpc:DispatchHandler>
      <name>*
      </name>
      <contextX>
        [#result] 
          { 
            accountId:=[rpc:Call].nextPath.firstElement()
            ,new:=.accountId=="-"
            ,data:=!.new
                  ?[api].type.@forId(.accountId)
                  :[*dt:Edit{ [api].type }].()
          }
      </contextX>
      <requireMapping>true
      </requireMapping>
      <defaultHandler>
        <rpc:JsonHandler>
          <params>
            [#p]
            {
              displayName:=[result].data.displayName,
              customerId:=[result].data.customerId,
              contactId:=[result].data.contactId,
              
            }
          </params>
          <result>
            ![rpc:Call].request.isPost()
            ?[api].out([result].data)           
            :@{[result].data
                 =[result].data
                  { [result].new
                    ?.[*dt:Edit{ action:=`
                       @{ displayName=[p].displayName,
                          customerId=[p].customerId,
                          credit=false,
                          contactId=[p].contactId,
                       }`
                     }].()
                    :.[*dt:Edit{ action:=`
                       @{ 
                         displayName=[p].displayName,
                         contactId=[p].contactId,
                       }`
                     }].()
                   }
              ,[api].out([result].data) 
              }                
            
          </result>
        </rpc:JsonHandler>
      </defaultHandler>
      <handlers>
        <rpc:JsonHandler>
          <name>.delete
          </name>
          <result>
             @{ [result].data.[*dt:Edit{ action:=`@tuple.delete()` }].()
              }
          </result>
        </rpc:JsonHandler>
      </handlers>
    </rpc:DispatchHandler>
  </handlers>
</rpc:DispatchHandler>
