<rpc:DispatchHandler
  xmlns:rpc="class:/spiralcraft/servlet/rpc/"
  xmlns:t="class:/spiralcraft/task/"
  xmlns:dt="class:/spiralcraft/data/task/"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  xmlns:j="class:/java/lang/"
  xmlns:ju="class:/java/util/"
  xmlns:fn="class:/spiralcraft/lang/functions"
  xmlns:util="class:/spiralcraft/util"
  xmlns:biz="class:/spiralcraft/biz/meta/"
  xmlns:bizwf="class:/spiralcraft/biz/wf/"
  >
  <debug>false
  </debug>
  <name>trackerAlert
  </name>
  <contextX>
  [#api]
  {
    type:~[@bizwf:TrackerAlert],
    out:~[#{[api].type.@nil}]
            { [.]
              {{ 
                  id:=..id,
                  code:=..code,
                  creatorId:=..creatorId,
                  creator:=[@swm:User].@forId(..creatorId)
                    {{
                      commonName:=..commonName,
                    }},
                  deactivator:=..deactivatorId==null?null:
                    [@swm:User].@forId(..deactivatorId)
                    {{
                      commonName:=..commonName,
                    }},
                  note:=[@bizwf:TrackerNote].@forId(..noteId)
                    {{
                      id:=..id,
                      sourceType:=..sourceType,
                      sourceText:=..sourceText,
                    }},
                  active:=..active,
                  activatedTime:=..activatedTime,
                  deactivatedTime:=..deactivatedTime,
              }}
            }
         
  }
  </contextX>
  <defaultHandler>
    <rpc:JsonHandler>
      <result>
        [*dt:Fetch{[api].type.type.aggregateType}].()
          #{[api].out(.)}
      </result>
    </rpc:JsonHandler>
  </defaultHandler>
  <handlers>
    <rpc:DispatchHandler>
      <name>*
      </name>
      <contextX>
        [#result] 
          { 
            id:=[rpc:Call].nextPath.firstElement()
            ,new:=.id=="-"
            ,data:=!.new
                  ?[api].type.@forId(.id)
                  :[*dt:Edit{ [api].type }].()
          }
      </contextX>
      <requireMapping>true
      </requireMapping>
      <handlers>
        <rpc:JsonHandler>
          <name>.deactivate
          </name>
          <transactional>true
          </transactional>
          <result>
            { 
               alert:=[result].data.
                 [*dt:Edit{
                  :@{ active=false, 
                      deactivatedTime=[@ju:Date].(),
                      deactivatorId=[swm:Session].user.id, 
                    } 
                 }].(),
               note:=[@bizwf:TrackerNote].@forId(.alert.noteId)
                .[*dt:Edit{ :alertId=null }].(),
            }
            {
              [@bizwf:TrackerLog].@logEvent
                ([swm:Session].user.id
                ,.alert.entityId
                ,"unalert"
                ,objectType:="Alert"
                ,objectId:=.alert.id
                ),
              .
            }
            { [api].out(.alert) }
          </result>
        </rpc:JsonHandler>
        <rpc:JsonHandler>
          <name>.delete
          </name>
          <result>
            [result].data.[*dt:Delete].()
          </result>
        </rpc:JsonHandler>
      </handlers>
    </rpc:DispatchHandler>
  </handlers>
</rpc:DispatchHandler>
