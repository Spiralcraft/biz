<rpc:DispatchHandler
  xmlns:rpc="class:/spiralcraft/servlet/rpc/"
  xmlns:t="class:/spiralcraft/task/"
  xmlns:dt="class:/spiralcraft/data/task/"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  xmlns:j="class:/java/lang/"
  xmlns:fn="class:/spiralcraft/lang/functions"
  xmlns:util="class:/spiralcraft/util"
  xmlns:biz="class:/spiralcraft/biz/meta/"
  xmlns:bizpm="class:/spiralcraft/biz/pm/"
  >
  <debug>false
  </debug>
  <name>project
  </name>
  <contextX>
  [#api]
  {
    type:~[@bizpm:Project],
    out:~[#{[@bizpm:Project].@nil}]
            { [.]
              {{ id:=..id
                , name:=..name
                , customerId:=..customerId
                , customer:=..customer{{ name:=..name }}
                , currentRun:=..currentRun==null?null:..currentRun
                  {{ name:=..name, 
                     tracker:=..tracker
                     {.==null?null:{
                       id:=..id,
                       modelId:=..modelId,
                       order:=..order,
                       components:=..components
                         .[*fn:Sort{`..order.indexOf(.id)`,false}]#
                         {{ 
                           id:=..id,
                           name:=..name,
                           trackerId:=..trackerId,
                           linkedTrackerId:=..linkedTrackerId,
                           linkedTracker:=..linkedTracker
                             {.==null?null:{
                               id:=..id,
                               statusId:=..statusId,
                               status:=..status,
                             }},
                           trackerModelComponentId:=..trackerModelComponentId,
                         }},                       
                       status:=..status
                       {{
                         id:=..id,
                         label:=..label,
                         color:=..color,
                         description:=..description,
                       }}
                     }}
                             
                  }}
               }}
            }
         
  }
  </contextX>
  <defaultHandler>
    <rpc:JsonHandler>
      <result>
        [*dt:Fetch{[@bizpm:Project.list]}].()
          #{[api].out(.)}
      </result>
    </rpc:JsonHandler>
  </defaultHandler>
  <handlers>
    <rpc:DispatchHandler>
      <name>*
      </name>
      <contextX>
        [#result] 
          { 
            id:=[rpc:Call].nextPath.firstElement()
            ,new:=.id=="-"
            ,data:=!.new
                  ?[@bizpm:Project].@forId(.id)
                  :[*dt:Edit{ [@bizpm:Project] }].()
          }
      </contextX>
      <requireMapping>true
      </requireMapping>
      <defaultHandler>
        <rpc:JsonHandler>
          <params>
            [#p]
            {
              name:=[result].data.name
              ,customerId:=[result].data.customerId
            }
          </params>
          <result>
            ![rpc:Call].request.isPost()
            ?[api].out([result].data)        
            :@{[result].data
                 =[result].data
                  { [result].new
                    ?.[*dt:Edit{ action:=`
                       @{ name=[p].name
                        , customerId=[p].customerId
                       }`
                     }].()
                    :.[*dt:Edit{ action:=`
                       @{ name=[p].name
                        , customerId=[p].customerId
                       }`
                     }].()
                   }
              ,[api].out([result].data)
              }                
            
          </result>
        </rpc:JsonHandler>
      </defaultHandler>
      <handlers>
        <rpc:JsonHandler>
          <name>.delete
          </name>
          <result>
            @{ [result].data.[*dt:Edit{ action:=`@tuple.delete()` }].()
             }
          </result>
        </rpc:JsonHandler>
        <rpc:JsonHandler>
          <name>.startRun
          </name>
          <params>[#p] { runType:[@j:String] }
          </params>
          <result>
            [result].data
            {
              .startRun([p].runType),
              [api].out([api].type.@forId(.id)),
            }
          </result>
        </rpc:JsonHandler>
        <rpc:JsonHandler>
          <name>.resetRun
          </name>
          <result>
            [result].data
            {
              .resetRun(),
              [api].out([api].type.@forId(.id)),
            }
          </result>
        </rpc:JsonHandler>
      </handlers>
    </rpc:DispatchHandler>
  </handlers>
</rpc:DispatchHandler>
