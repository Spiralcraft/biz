<rpc:DispatchHandler
  xmlns:rpc="class:/spiralcraft/servlet/rpc/"
  xmlns:t="class:/spiralcraft/task/"
  xmlns:dt="class:/spiralcraft/data/task/"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  xmlns:j="class:/java/lang/"
  xmlns:ju="class:/java/util/"
  xmlns:fn="class:/spiralcraft/lang/functions"
  xmlns:util="class:/spiralcraft/util"
  xmlns:biz="class:/spiralcraft/biz/meta/"
  xmlns:bizwf="class:/spiralcraft/biz/wf/"
  >
  <debug>false
  </debug>
  <name>trackerLog
  </name>
  <contextX>
  [#api]
  {
    type:~[@bizwf:TrackerLog],
    out:~[#{[api].type.@nil}]
            { [.]
              {{ 
                  id:=..id,
                  userId:=..userId,
                  user:=[@swm:User].@forId(..userId)
                    {{
                      commonName:=..commonName,
                    }},
                  entityId:=..entityId,
                  timestamp:=..timestamp,
                  eventTag:=..eventTag,
                  eventData:=..eventData,
                  objectType:=..objectType,
                  objectId:=..objectId,
                  note:=objectType!="Note"?null:
                    [@bizwf:TrackerNote].@forId(..objectId)
                    {{
                      id:=..id,
                      sourceType:=..sourceType,
                      sourceText:=..sourceText,
                    }},
                  alert:=objectType!="Alert"?null:
                    [@bizwf:TrackerAlert].@forId(..objectId)
                    {{
                      id:=..id,
                      code:=..code,
                      note:=[@bizwf:TrackerNote].@forId(..noteId)
                        {{
                          id:=..id,
                          sourceType:=..sourceType,
                          sourceText:=..sourceText,
                        }},                      
                    }},
                  status:=objectType!="Status"?null:
                    [@bizwf:TrackerStatus].@forId(..objectId)
                    {{ id:=..id,
                       label:=..label,
                       color:=..color,
                       description:=..description,
                    }},                  
              }}
            }
         
  }
  </contextX>
  <defaultHandler>
    <rpc:JsonHandler>
      <result>
        [*dt:Fetch{[api].type.type.aggregateType}].()
          .[*fn:Sort{`.timestamp`,true}]
          #{[api].out(.)}
      </result>
    </rpc:JsonHandler>
  </defaultHandler>
  <handlers>
    <rpc:JsonHandler>
      <name>.forEntity
      </name>
      <queryParams>entityId
      </queryParams>
      <params>
        [#p]
        {
          entityId:[@j:String]
        }
      </params>
      <result>
        [api].type.@forEntity([p].entityId)
          .[*fn:Sort{ 
            [*fn:Ordering
              {`.timestamp`
              ,true
              }
            ]
          }]
          #{[api].out(.)}
      </result>
    </rpc:JsonHandler>
    <rpc:DispatchHandler>
      <name>*
      </name>
      <contextX>
        [#result] 
          { 
            id:=[rpc:Call].nextPath.firstElement()
            ,new:=.id=="-"
            ,data:=!.new
                  ?[api].type.@forId(.id)
                  :[*dt:Edit{ [api].type }].()
          }
      </contextX>
      <requireMapping>true
      </requireMapping>
      <handlers>
        <rpc:JsonHandler>
          <name>.delete
          </name>
          <result>
            [result].data.[*dt:Delete].()
          </result>
        </rpc:JsonHandler>
      </handlers>
    </rpc:DispatchHandler>
  </handlers>
</rpc:DispatchHandler>
