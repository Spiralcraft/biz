<rpc:DispatchHandler
  xmlns:rpc="class:/spiralcraft/servlet/rpc/"
  xmlns:t="class:/spiralcraft/task/"
  xmlns:dt="class:/spiralcraft/data/task/"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  xmlns:j="class:/java/lang/"
  xmlns:fn="class:/spiralcraft/lang/functions"
  xmlns:util="class:/spiralcraft/util"
  xmlns:biz="class:/spiralcraft/biz/meta/"
  xmlns:bizwf="class:/spiralcraft/biz/wf/"
  >
  <debug>false
  </debug>
  <name>tracker
  </name>
  <contextX>
  [#api]
  {
    type:~[@bizwf:Tracker],
    out:~[#{[api].type.@nil}]
            { [.]
              {{ 
                id:=..id,
                modelId:=..modelId,
                statusId:=..statusId,
                status:=..status,
                order:=..order,
                components:=..components
                  .[*fn:Sort{`..order.indexOf(.id)`,false}]#
                  {{ 
                    id:=..id,
                    name:=..name,
                    trackerId:=..trackerId,
                    linkedTrackerId:=..linkedTrackerId,
                    linkedTracker:=..linkedTracker
                      {.==null?null:{
                        id:=..id,
                        statusId:=..statusId,
                        status:=..status,
                        alerts:=[@bizwf:TrackerAlert].@forEntity(.id)
                         .[*fn:Sort{
                            [*fn:Ordering{`.active`,true,
                              [*fn:Ordering{`[{'d','w','i','s','q'}].indexOf(.code.charAt(0))`,false,
                                [*fn:Ordering{`.activatedTime`,true}]
                              }]
                            }]
                          }]#
                          {{
                            id:=..id,
                            code:=..code,
                            creatorId:=..creatorId,
                            creator:=[@swm:User].@forId(..creatorId)
                            {{
                              commonName:=..commonName,
                            }},
                            deactivator:=..deactivatorId==null?null:
                              [@swm:User].@forId(..deactivatorId)
                              {{
                                commonName:=..commonName,
                              }},
                            note:=[@bizwf:TrackerNote].@forId(..noteId)
                              {{
                                id:=..id,
                                sourceType:=..sourceType,
                                sourceText:=..sourceText,
                              }},
                            active:=..active,
                            activatedTime:=..activatedTime,
                            deactivatedTime:=..deactivatedTime,
                          }},
                        activeAlerts:=.alerts[.active],
                        
                      }},
                    trackerModelComponentId:=..trackerModelComponentId,
                    perspectiveIdList:=..trackerModelComponent.perspectiveIdList,                    
                  }},
                alerts:=[@bizwf:TrackerAlert].@forEntity(.id)
                 .[*fn:Sort{
                    [*fn:Ordering{`.active`,true,
                      [*fn:Ordering{`[{'d','w','i','s','q'}].indexOf(.code.charAt(0))`,false,
                        [*fn:Ordering{`.activatedTime`,true}]
                      }]
                    }]
                  }]#
                  {{
                    id:=..id,
                    code:=..code,
                    creatorId:=..creatorId,
                    creator:=[@swm:User].@forId(..creatorId)
                    {{
                      commonName:=..commonName,
                    }},
                    deactivator:=..deactivatorId==null?null:
                      [@swm:User].@forId(..deactivatorId)
                      {{
                        commonName:=..commonName,
                      }},
                    note:=[@bizwf:TrackerNote].@forId(..noteId)
                      {{
                        id:=..id,
                        sourceType:=..sourceType,
                        sourceText:=..sourceText,
                      }},
                    active:=..active,
                    activatedTime:=..activatedTime,
                    deactivatedTime:=..deactivatedTime,
                  }},
                activeAlerts:=.alerts[.active],
                
              }}
            }
         
  }
  </contextX>
  <defaultHandler>
    <rpc:JsonHandler>
      <result>
        [*dt:Fetch{[api].type.type.aggregateType}].()
          #{[api].out(.)}
      </result>
    </rpc:JsonHandler>
  </defaultHandler>
  <handlers>
    <rpc:DispatchHandler>
      <name>*
      </name>
      <contextX>
        [#result] 
          { 
            id:=[rpc:Call].nextPath.firstElement()
            ,new:=.id=="-"
            ,data:=!.new
                  ?[api].type.@forId(.id)
                  :[*dt:Edit{ [api].type }].()
          }
      </contextX>
      <requireMapping>true
      </requireMapping>
      <defaultHandler>
        <rpc:JsonHandler>
          <params>
            [#p]
            {
              statusId:=[result].data.statusId,
            }
          </params>
          <result>
            ![rpc:Call].request.isPost()
            ?[api].out([result].data)        
            :@{[result].data
                 =[result].data
                  { [result].new
                    ?.[*dt:Edit{ action:=`
                       @{statusId=[p].statusId,
                       }`
                     }].()
                    :.[*dt:Edit{ action:=`
                       @{statusId=[p].statusId,
                       }`
                     }].()
                   }
              ,[api].out([result].data)
              }                
            
          </result>
        </rpc:JsonHandler>
      </defaultHandler>
      <handlers>
        <rpc:JsonHandler>
          <name>.update
          </name>
          <transactional>true
          </transactional>
          <params>
            [#p] 
            { 
              newStatusId:[@j:String],
              note:[@j:String],
              alert:[@j:String],
            }
          </params>
          <guard>
            <rpc:Guard>
              <assertion>[rpc:Call].request.isPost()
              </assertion>
            </rpc:Guard>
          </guard>
          <result>
            { 
               tracker:=
                 [p].newStatusId!=null
                 ?[result].data.updateStatus([p].newStatusId)
                    { 
                      [@bizwf:TrackerLog].@logEvent
                        ([swm:Session].user.id
                        ,[result].data.id
                        ,"updateStatus"
                        ,objectType:="Status"
                        ,objectId:=[p].newStatusId
                        ),
                      .
                    }
                 :[result].data,
               note:=![p].note.@empty
                 ?[@bizwf:TrackerNote].@create(.tracker.id,"pre",[p].note,[swm:Session].user.id)
                    { 
                      [p].alert.@empty
                      ?[@bizwf:TrackerLog].@logEvent
                        ([swm:Session].user.id
                        ,[result].data.id
                        ,"logNote"
                        ,objectType:="Note"
                        ,objectId:=.id
                        )
                      :null,
                    .
                    }
                 :null,
               alert:=![p].alert.@empty
                 ?[@bizwf:TrackerAlert].@createAndPost(.note,[p].alert,[swm:Session].user.id)
                    { 
                      [@bizwf:TrackerLog].@logEvent
                        ([swm:Session].user.id
                        ,[result].data.id
                        ,"alert"
                        ,objectType:="Alert"
                        ,objectId:=.id
                        ),
                    .
                    }
                 :null,
            }
            { [api].out(.tracker)
            }.@log("Updated tracker "+.)
          </result>
        </rpc:JsonHandler>
        <rpc:JsonHandler>
          <name>.delete
          </name>
          <result>
            @{ [result].data.[*dt:Edit{ action:=`@tuple.delete()` }].()
             }
          </result>
        </rpc:JsonHandler>
      </handlers>
    </rpc:DispatchHandler>
  </handlers>
</rpc:DispatchHandler>
