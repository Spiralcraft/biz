<rpc:DispatchHandler
  xmlns:rpc="class:/spiralcraft/servlet/rpc/"
  xmlns:t="class:/spiralcraft/task/"
  xmlns:dt="class:/spiralcraft/data/task/"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  xmlns:j="class:/java/lang/"
  xmlns:fn="class:/spiralcraft/lang/functions"
  xmlns:util="class:/spiralcraft/util"
  xmlns:biz="class:/spiralcraft/biz/meta/"
  xmlns:social="class:/spiralcraft/archetype/social"
  xmlns:postal="class:/spiralcraft/archetype/postal"
  xmlns:st="class:/spiralcraft/text"
  >
  <debug>false
  </debug>
  <name>contact
  </name>
  <contextX>
  [#api]
  {
    type:~[@social:Contact],
    out:~[#{[api].type.@nil}]
            { [.]
              {{
                id:=..id,
                knownAs:=..knownAs,
                attentionName:=..attentionName,
                organizationName:=..organizationName,
                email:=..email,
                phone:=..phone,
                postalAddress:=..postalAddress
                  {{
                    streetAddress:=..streetAddress,
                    locator:=..locator,
                    locality:=..locality,
                    region:=..region,
                    postalCode:=..postalCode,
                  }},
              }}
           }
         
  }
  </contextX>
  <defaultHandler>
    <rpc:JsonHandler>
      <result>
        [*dt:Fetch{[api].type.type.aggregateType}].()
          #{[api].out(.)}
      </result>
    </rpc:JsonHandler>
  </defaultHandler>
  <handlers>
    <rpc:JsonHandler>
      <name>.search
      </name>
      <queryParams>q
      </queryParams>
      <params>
        [#p]
        {
          q:[@j:String]
        }
      </params>
      <result>
        [#x] { 
          query:=[p].q,
          terms:=.query.split("\\\s+"),
          scorer:=[@st:RelevanceCalculator].(.terms),
          tags:=[*dt:Fetch{[@biz:ContactTag.list]}].()
            [!..terms[..searchLabel.contains(.toLowerCase())].@empty].@log("Tags: "+.),
          result:=
            [*dt:Fetch{[api].type.type.aggregateType}].()
              #{{
                item:=[api].out(..),
                score:=
                  [x].scorer.score(..knownAs)*10
                  +[x].scorer.score(..attentionName)*10
                  +[x].scorer.score(..organizationName)*10
                  +[x].scorer.score(..email)*10
                  +[x].scorer.score(..phone)*10
                  +( [@biz:ContactNote].@forEntity(..id)
                    $[ [x].scorer.score(.sourceText).[*fn:Sum] ]
                   )
                  +( [@biz:ContactTagged].@forEntity(..id)
                      [![x].tags[.id==..tagId].@empty].@size * 2048
                   )
                   ,
              }}
              [.score &gt; 0]
              .[*fn:Sort{`.score`,true}]
        }
        {{
          query:=..query,
          terms:=..terms,
          result:=..result,
        }}      
      </result>
    </rpc:JsonHandler>
    <rpc:DispatchHandler>
      <name>*
      </name>
      <contextX>
        [#result] 
          { 
            id:=[rpc:Call].nextPath.firstElement()
            ,new:=.id=="-"
            ,data:=!.new
                  ?[api].type.@forId(.id)
                  :[*dt:Edit{ [api].type }].()
          }
      </contextX>
      <requireMapping>true
      </requireMapping>
      <defaultHandler>
        <rpc:JsonHandler>
          <params>
            [#p]
            {
              knownAs:=[result].data.knownAs,
              attentionName:=[result].data.attentionName,
              organizationName:=[result].data.organizationName,
              email:=[result].data.email,
              phone:=[result].data.phone,
              postalAddress:={
                streetAddress:=[result].data.postalAddress.streetAddress,
                locator:=[result].data.postalAddress.locator,
                locality:=[result].data.postalAddress.locality,
                region:=[result].data.postalAddress.region,
                postalCode:=[result].data.postalAddress.postalCode,
              },
            }
          </params>
          <result>
            ![rpc:Call].request.isPost()
            ?[api].out([result].data)           
            :@{[result].data
                 =[result].data
                  { [result].new
                    ?.[*dt:Edit{ action:=`
                       @{ 
                          knownAs=[p].knownAs,
                          attentionName=[p].attentionName,
                          organizationName=[p].organizationName,
                          email=[p].email,
                          phone=[p].phone,
                          postalAddress=postalAddress.[*dt:Edit].()
                          {
                            (.==null?[@postal:Address.buffer].():.)
                            {
                              .streetAddress=[p].postalAddress.streetAddress,
                              .locator=[p].postalAddress.locator,
                              .locality=[p].postalAddress.locality,
                              .region=[p].postalAddress.region,
                              .postalCode=[p].postalAddress.postalCode,
                              .
                            }
                          },
                       }`
                     }].()
                    :.[*dt:Edit{ action:=`
                       @{ 
                          knownAs=[p].knownAs,
                          attentionName=[p].attentionName,
                          organizationName=[p].organizationName,
                          email=[p].email,
                          phone=[p].phone,
                          postalAddress=postalAddress.[*dt:Edit].()
                          {
                            (.==null?[@postal:Address.buffer].():.)
                            {
                              .streetAddress=[p].postalAddress.streetAddress,
                              .locator=[p].postalAddress.locator,
                              .locality=[p].postalAddress.locality,
                              .region=[p].postalAddress.region,
                              .postalCode=[p].postalAddress.postalCode,
                              .
                            }
                          },
                       }`
                     }].()
                   }
              ,[api].out([result].data) 
              }                
            
          </result>
        </rpc:JsonHandler>
      </defaultHandler>
      <handlers>
        <rpc:JsonHandler>
          <name>.delete
          </name>
          <result>
             @{ [result].data.[*dt:Edit{ action:=`@tuple.delete()` }].()
              }
          </result>
        </rpc:JsonHandler>
      </handlers>
    </rpc:DispatchHandler>
  </handlers>
</rpc:DispatchHandler>
