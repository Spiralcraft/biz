<meta:Type
  xmlns:meta="class:/spiralcraft/data/types/meta"
  xmlns:ab="class:/spiralcraft/biz/abstract"
  xmlns:dm="class:/spiralcraft/data/methods"
  xmlns:dt="class:/spiralcraft/data/task"
  xmlns:j="class:/java/lang"
  xmlns:ju="class:/java/util"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  >

  <fields>
    <meta:SequenceField>
      <name>id
      </name>
      <type><LSID.type/>
      </type>
      <!-- Sequence needs to be scoped to leaf entity -->
      <template>true
      </template>
    </meta:SequenceField>
    
    <meta:Field>
      <name>creatorId
      </name>
      <type><LSID.type/>
      </type>
    </meta:Field>
    
    <meta:Field>
      <name>deactivatorId
      </name>
      <type><LSID.type/>
      </type>
    </meta:Field>

    <meta:Field>
      <name>active
      </name>
      <type><Boolean.type/>
      </type>
    </meta:Field>

    <meta:Field>
      <name>entityId
      </name>
      <type><LSID.type/>
      </type>
    </meta:Field>

    <meta:Field>
      <name>noteId
      </name>
      <type><LSID.type/>
      </type>
    </meta:Field>

    <meta:Field>
      <name>activatedTime
      </name>
      <type><Date.type/>
      </type>
    </meta:Field>
    
    <meta:Field>
      <name>deactivatedTime
      </name>
      <type><Date.type/>
      </type>
    </meta:Field>
    
    <meta:Field>
      <name>code
      </name>
      <type><String.type/>
      </type>
    </meta:Field>
    
  </fields>  
  
  <keys>
    <meta:Key>
      <primary>true
      </primary>
      <fieldList>id
      </fieldList>
    </meta:Key>
    <meta:Key>
      <fieldList>entityId
      </fieldList>
    </meta:Key>
    <meta:Key>
      <fieldList>noteId
      </fieldList>
    </meta:Key>
  </keys>
  <methods>
    <dm:ForId/>
    
    <meta:Method>
      <name>forEntity
      </name>
      <static>true
      </static>
      <parameterTypes><String.type/>
      </parameterTypes>
      <returnTypeX>[meta:Type].aggregateType
      </returnTypeX>
      <contextX>[#p] { entityId:[@j:String] }
      </contextX>
      <x>[*dt:Fetch{[meta:Type].aggregateType, 
            [{`entityId:=[p].entityId`}]
            }].()
      </x>      
    </meta:Method>
    <meta:Method>
      <name>forNote
      </name>
      <static>true
      </static>
      <parameterTypes><String.type/>
      </parameterTypes>
      <returnTypeX>[meta:Type].aggregateType
      </returnTypeX>
      <contextX>[#p] { noteId:[@j:String] }
      </contextX>
      <x>[*dt:Fetch{[meta:Type].aggregateType, 
            [{`noteId:=[p].noteId`}]
            }].()
      </x>      
    </meta:Method>
    <meta:TransactionMethod>
      <name>createAndPost
      </name>
      <static>true
      </static>
      <parameterTypes>
        <ab:AbstractNote.type/>
        <String.type/>
        <String.type/>
      </parameterTypes>
      <returnTypeX>[meta:Type]
      </returnTypeX>
      <contextX>[#p] 
        { note:[@ab:AbstractNote], 
          code:[@j:String],
          creatorId:[@j:String],
        }
      </contextX>
      <x>
        { alert:=
            [*dt:Edit{[meta:Type], 
               action:=`@{
                noteId=[p].note.id,
                entityId=[p].note.entityId,
                code=[p].code,
                creatorId=[p].creatorId,
                active=true,
                activatedTime=[@ju:Date].(),
               }`
             }].(),
        , note:=
            [p].note.alert(.alert.id)
        }.alert
         
      </x>      
    </meta:TransactionMethod>    
  </methods>
</meta:Type>